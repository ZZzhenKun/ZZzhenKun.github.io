<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通过hexo搭建自己的第一个博客</title>
    <url>/2020/07/10/%E9%80%9A%E8%BF%87hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="这是我第一次尝试写博客，请多多指教。安装博客使用的框架是hexo"><a href="#这是我第一次尝试写博客，请多多指教。安装博客使用的框架是hexo" class="headerlink" title="这是我第一次尝试写博客，请多多指教。安装博客使用的框架是hexo"></a>这是我第一次尝试写博客，请多多指教。安装博客使用的框架是hexo</h3><h2 id="第一步：安装git（后续的一切操作都基于git）"><a href="#第一步：安装git（后续的一切操作都基于git）" class="headerlink" title="第一步：安装git（后续的一切操作都基于git）"></a>第一步：安装git（后续的一切操作都基于git）</h2><ol>
<li>通过git官网  <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a>  下载相应的版本的git，我这里下载的是Windows版本</li>
<li>安装教程参考  <a href="https://blog.csdn.net/qq_39377418/article/details/95199800" target="_blank" rel="noopener">https://blog.csdn.net/qq_39377418/article/details/95199800</a>  讲的非常详细</li>
<li>安装完毕后Windows通过打开cmd控制台输入 <code>git</code> 会出现如下所示表明git安装成功<br><img src="/images/%E5%8D%9A%E5%AE%A21/git%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="git安装成功"> </li>
</ol>
<hr>
<h2 id="第二步：安装nodejs-npm-cnpm-hexo。nodejs官网网址：http-nodejs-cn-下载自己系统的对应版本，安装一直下一步。"><a href="#第二步：安装nodejs-npm-cnpm-hexo。nodejs官网网址：http-nodejs-cn-下载自己系统的对应版本，安装一直下一步。" class="headerlink" title="第二步：安装nodejs/npm/cnpm/hexo。nodejs官网网址：http://nodejs.cn/ 下载自己系统的对应版本，安装一直下一步。"></a>第二步：安装nodejs/npm/cnpm/hexo。nodejs官网网址：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a> 下载自己系统的对应版本，安装一直下一步。</h2><a id="more"></a>
<ol>
<li><p>安装成功cmd中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>会出现如下提示就说明安装成功（每个人版本不同）<br><img src="/images/%E5%8D%9A%E5%AE%A21/nodejs%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="nodejs安装成功"></p>
</li>
<li><p>nodejs安装完还会有一个npm组件，同样cmd输入 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E5%8D%9A%E5%AE%A21/npm%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="npm安装成功"></p>
</li>
<li><p>利用npm 安装 cnpm<br>cnpm是淘宝团队在国内的镜像源，下载速度比较快，cnpm和npm本质上是一个东西，只是提供商不同，同样在cmd中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>安装成功<br><img src="/images/%E5%8D%9A%E5%AE%A21/cnpm%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="npm安装成功"></p>
</li>
<li><p>利用安装好的cnpm安装hexo框架<br>cmd输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装成功后输入 <code>hexo -v</code><br><img src="/images/%E5%8D%9A%E5%AE%A21/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="hexo安装成功"></p>
</li>
</ol>
<hr>
<h2 id="第三步：创建blog"><a href="#第三步：创建blog" class="headerlink" title="第三步：创建blog"></a>第三步：创建blog</h2><ol>
<li><p>生成blog文件，使用其他名称可以在<code>blog</code>位置更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化博客</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E5%8D%9A%E5%AE%A21/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8D%9A%E5%AE%A2.png" alt="初始化博客成功"></p>
</li>
</ol>
<hr>
<h2 id="第四步：开始写博客"><a href="#第四步：开始写博客" class="headerlink" title="第四步：开始写博客"></a>第四步：开始写博客</h2><ol>
<li><p>创建第一篇博客“我的第一篇博客”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E5%8D%9A%E5%AE%A21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.png" alt="我的第一篇博客"></p>
</li>
<li><p>使用编辑软件编辑新生成的<code>.md</code>格式的文件，然后重新清理，生成，再启动博客，然后登录localhost：4000预览生成的博客。</p>
</li>
</ol>
<p>清理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo c</span><br></pre></td></tr></table></figure>
<p>生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E5%8D%9A%E5%AE%A21/%E5%8D%9A%E5%AE%A2%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="博客启动成功"></p>
<hr>
<h2 id="第五步：部署到GitHub上-自己要先创建GitHub账号"><a href="#第五步：部署到GitHub上-自己要先创建GitHub账号" class="headerlink" title="第五步：部署到GitHub上(自己要先创建GitHub账号)"></a>第五步：部署到GitHub上(自己要先创建GitHub账号)</h2><ol>
<li>新建仓库，给自己的仓库命名 </li>
</ol>
<p><strong>注意</strong> ：<em>部署个人博客的GitHub仓库的命名必须要符合特定的要求才行！！！</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure>
<h3 id="格式必须保持这样，因为这个也是博客的网址"><a href="#格式必须保持这样，因为这个也是博客的网址" class="headerlink" title="格式必须保持这样，因为这个也是博客的网址"></a><strong>格式必须保持这样</strong>，因为这个也是博客的网址</h3><ol start="2">
<li><p>安装部署软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install --sava hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置  <strong>_config.yml</strong></p>
</li>
</ol>
<p><strong>将文件拉到最下端，找到#Deployment</strong></p>
<ol>
<li>type: git</li>
<li>repo: <a href="https://github.com/ZZzhenKun/ZZzhenKun.github.io.git" target="_blank" rel="noopener">https://github.com/ZZzhenKun/ZZzhenKun.github.io.git</a></li>
<li>branch: master</li>
</ol>
<p><strong>注意</strong>：冒号后面必须要空一格</p>
<ol start="4">
<li>部署到GitHub<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>这里第一次部署失败要输入用户名和姓名，更具提示</strong><br>如果成功会弹出一个GitHub登录窗口，输入账户和密码就可以部署成功</p>
<hr>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>第一个自己的博客(hexo)</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读论文的方法（转载自B站 wing宝宝）</title>
    <url>/2020/07/12/%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="如何高效阅读机器学习顶会论文"><a href="#如何高效阅读机器学习顶会论文" class="headerlink" title="如何高效阅读机器学习顶会论文"></a>如何高效阅读机器学习顶会论文</h1><h3 id="1-读书与读论文的区别"><a href="#1-读书与读论文的区别" class="headerlink" title="1.读书与读论文的区别"></a>1.读书与读论文的区别</h3><p><strong>教材仔细读：</strong>经过长时间的打磨，是精品；书籍如CSAPP, ESL, MLAPP, GEB（最后这个花费作者一辈子心血）</p>
<p><strong>论文要甄别：</strong></p>
<ul>
<li>顶会论文：cvpr, icml, nips, 等</li>
<li><ul>
<li>70%：在前人基础上做了一丁点改进，如改一下损失函数、调调正则化  -&gt; <strong>不值得花大量时间研读</strong></li>
<li>10%：给领域的从业者带来灵感的启发</li>
<li>1%：给行业所有的从业者都有启发，甚至带来方向性的影响</li>
</ul>
</li>
</ul>
<p>⚠️：只有一小部分的文章值得复现，如顶会论文的best paper 或 oral；</p>
<p>⚠️：经典的论文在你之前可能已经有很多人复现过了，作者也可能会给出官方的代码；</p>
<p>⚠️：硕士、高年级的本科生、刚入门者这些垃圾可以不用读；但博士生为了在这个特别小的方向上能有所建树、保持敏锐的嗅觉，这些垃圾也要读，宁滥勿缺。</p>
<a id="more"></a>
<h3 id="2-论文来源"><a href="#2-论文来源" class="headerlink" title="2. 论文来源"></a>2. 论文来源</h3><p>第一类：一手来源</p>
<ul>
<li>会议的官网：cvpr、iccv、eccv、icml、nips（看best paper &amp; oral &amp; 获奖论文）</li>
<li>arxiv.org (放着未发表的或者预览版的论文)，需要一个账号</li>
<li>Google scholar;订阅功能 （自然语言处理、auto ml），订阅搜索结果，每日会自动搜索，关注最新论文</li>
</ul>
<p>第二类：二手来源</p>
<ul>
<li>野生收集：如github上的awesome list，可以订阅watch、star</li>
<li>可靠信息筛选：公开课（cs224n, cs224w, cs231n, 李宏毅老师机器学习公开课）的幻灯片里有论文列表一定要好好读；被人认可的个人来源、知乎大v、微博；项目源码的注释中的论文</li>
</ul>
<p>第三类：三手来源</p>
<ul>
<li>综述性论文</li>
</ul>
<h3 id="3-如何读论文"><a href="#3-如何读论文" class="headerlink" title="3. 如何读论文"></a>3. 如何读论文</h3><p>场景：刚开完会议或正在开，手中有一次会议上所有被接收的论文或者随意按顺序拿出20篇</p>
<ul>
<li><strong>对20篇论文进行简单分类：</strong> 整理、分三类记录</li>
<li><ul>
<li><span style='color:red'>1.论文标题和作者</span></li>
<li><span style='color:red'>2.文章摘要</span>（用自己的话复述，用一句话或50字以内如何向别人推荐和介绍这篇论文，最好用英语；【这篇文章用了什么方法、在干什么】）</li>
<li><span style='color:red'>3.这篇文章要不要继续精读+当时作出决定的日期</span></li>
</ul>
</li>
<li><strong>精读环节</strong>：带着问题读【把自己想象成一个杠精去挑刺】（你开始提出的问题以及最关心的问题有没有在看完文章后得到解答）* * <strong>精读顺序</strong>：<strong>摘要</strong>（<span style='color:red'>产生问题Q</span>）-&gt; <strong>引言</strong>（上述问题是否被放大、有没有出现新问题、<span style='color:red'>前面的问题有没有得到回答A </span>）-&gt; 再次确认要不要读下去 -&gt; <strong>总结</strong>部分，即conclusion、feature work（作者总结的文章重点以及未来的打算是否明确）-&gt; 知识介绍（重点读每一段的第一句话；<u>如果遇到图表，先仔细的看图表</u>）-&gt; 再次确定要不要继续读 -&gt; 进入最耗时的核心<strong>算法部分</strong> -&gt; <strong>实验部分</strong>（数据集、评价标准）-&gt; 决定要不要<strong>复现</strong>、将自己的实验结果与论文进行比较<ul>
<li><strong>相关工作</strong>：仔仔细细的看；这个方法是不是在某篇文章的基础上做的、与其他文章有什么关系、借鉴了哪些方法、以及该领域之前是用什么方法、有哪些数据集是被其他人做过实验的、其他人得到了什么效果；<span style='color:red'>【related works】相关文章的题目 + 自己总结这篇文章与其他相关工作的关系或区别。</span></li>
</ul>
</li>
</ul>
<p>⚠️ 时间：一个半小时；上述红色部分是笔记的记录内容；如果文章对于自己的难度较大，可以暂缓阅读，等把文章中提到的概念、需要的基础知识补一下再回过头来看。</p>
<p>最后在总结了所有的论文后，<span style='color:red'>再附一张纸：总结多少文章都在关注什么方面的内容，有多少文章在针对某类技术、某个方向，大家都在研究什么。</span></p>
<p>⚠️ 整个过程中要思考🤔：这个东西有没有价值、为什么大家都在做这些、你对他是什么看法。过几年之后，回过头来，可以看到随着时间研究内容发生的变化。</p>
<p><strong>将这些样本数据，转化为自己的记忆是非常重要的。</strong></p>
<h3 id="4-文献管理工具"><a href="#4-文献管理工具" class="headerlink" title="4.文献管理工具"></a>4.文献管理工具</h3><p>Zotero : <a href="https://www.zotero.org/" target="_blank" rel="noopener">https://www.zotero.org/</a> (免费&amp;跨平台)</p>
<p>Mendeley : <a href="https://www.mendeley.com/" target="_blank" rel="noopener">https://www.mendeley.com/</a> (免费&amp;跨平台)</p>
<p>Endnote ：<a href="https://www.endnote.com" target="_blank" rel="noopener">https://www.endnote.com</a></p>
<p>Papers : <a href="https://www.papersapp.com/" target="_blank" rel="noopener">https://www.papersapp.com/</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>高效阅读论文方法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用instanceof后为何要向下强转</title>
    <url>/2020/07/13/%E4%BD%BF%E7%94%A8instanceof%E5%90%8E%E4%B8%BA%E4%BD%95%E8%A6%81%E5%90%91%E4%B8%8B%E5%BC%BA%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="使用instanceof时基本都使用了多态的方式创建对象"><a href="#使用instanceof时基本都使用了多态的方式创建对象" class="headerlink" title="使用instanceof时基本都使用了多态的方式创建对象"></a>使用instanceof时基本都使用了多态的方式创建对象</h1><h3 id="1-instanceof的作用"><a href="#1-instanceof的作用" class="headerlink" title="1.instanceof的作用"></a>1.instanceof的作用</h3><p>instanceof使用的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(A instanceof B)</span><br></pre></td></tr></table></figure>

<p>判断对象A是不是B的实例<br>这个判断之后并没有必要使用instanceof这个语句，但一般情况我们使用instanceof是下面的情况中：</p>
<a id="more"></a>
<h3 id="2-Person-person-Person-o-的作用"><a href="#2-Person-person-Person-o-的作用" class="headerlink" title="2. Person person = (Person)o;的作用"></a>2. Person person = (Person)o;的作用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"Jack"</span>,<span class="number">45</span>);</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="string">"Laownag"</span>,<span class="number">47</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.compareTo(person1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123; <span class="comment">//判断o是否时Person的实例</span></span><br><span class="line">            Person person = (Person)o;<span class="comment">//向下强转</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(person.name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>在@override中定义的参数类型时<code>Object o</code>,这是一个最大的父类，这样定义的目的是我们自己的所有类的类型都是Object的子类，通过Java的多态，我们自己定义的所有类的对象都可以传进来。</p>
</li>
<li><p>比对之后确定o是Person类的实例，但是由于o是Object类型的对象，不能调用Person类的所有方法属性，所以要向下转型，即</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person person &#x3D; (Person)o;</span><br></pre></td></tr></table></figure>

<p>通过这一步之后将<code>o</code>所指向的地址值传给<code>person</code>对象。由于<code>person</code>对象是Person类的实例，所以可以调用Person类的所有方法。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123; <span class="comment">//判断o是否时Person的实例</span></span><br><span class="line">        Person person = (Person)o;<span class="comment">//向下强转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(person.name);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>形参是一个Object类的对象</li>
<li>需要判读传给o的实参是不是属于Person类</li>
<li>o是Object类，不能调用Person类的方法，需要向下转型到Person类</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>instanceof的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS相关知识总结</title>
    <url>/2020/12/20/CSS%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ul>
<li>要将文字在父元素中垂直居中，只需将父元素的line-height设置为一个和父元素height一样大小的值即可<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">height</span>: 25<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">line-height</span>: 25<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li>
<li>取消超链接的下划线<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span></span><br></pre></td></tr></table></figure></li>
<li>设置超链接鼠标移入样式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:hover</span></span><br><span class="line"><span class="selector-class">.list</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span></span><br></pre></td></tr></table></figure></li>
<li>文字水平居中显示<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>设置阴影轮廓</li>
</ul>
<p>从左往右分别是：<strong>左右偏移 上下偏移 阴影大小   阴影颜色和透明度</strong>(偏移量：正值往右或者下偏移)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 20<span class="selector-tag">px</span>     20<span class="selector-tag">px</span>     40<span class="selector-tag">px</span>    <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.3</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>设置透明效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>设置矩形圆角(一个就是圆形的半径大小，两个就是椭圆形半径大小)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border-radius: 30px/50px;</span><br></pre></td></tr></table></figure></li>
<li><p>解决高度塌陷的问题（使用::after伪元素来解决）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义一个块元素首行文本内容之前的缩进量，方便搜索引擎找到</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-indent</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>解决高度塌陷和外边距重叠的最佳方法</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    display: table; //table既可以解决高度塌陷也可以解决外边距重叠</span><br><span class="line">    clear: both; //清除float的影响</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定位（布局等式：left-margin-left-width-margin-right-right-包含块宽度）"><a href="#定位（布局等式：left-margin-left-width-margin-right-right-包含块宽度）" class="headerlink" title="定位（布局等式：left + margin-left + width + margin-right + right = 包含块宽度）"></a>定位（布局等式：left + margin-left + width + margin-right + right = 包含块宽度）</h2></li>
<li><p><strong>相对定位</strong>：当元素的position属性值设置为relative时则开启了元素的相对定位（<strong>相对于自己最初的位置移动</strong>）</p>
<ul>
<li>相对定位的特点：</li>
</ul>
</li>
</ul>
<ol>
<li>元素开启相对定位以后，如果不设置偏移量元素不会发生任何的变化</li>
<li>相对定位是参照于元素在文档流中的位置进行定位的</li>
<li>相对定位会提升元素的层级</li>
<li>相对定位不会使元素脱离文档流</li>
<li>相对定位不会改变元素的性质块还是块，行内还是行内 </li>
</ol>
<ul>
<li><strong>绝对定位</strong>：当元素的position属性值设置为absolute时，则开启了元素的绝对定位（<strong>根据包含块的位置相对移动</strong>）<ul>
<li>绝对定位的特点：</li>
</ul>
</li>
</ul>
<ol>
<li>开启绝对定位后，如果不设置偏移量元素的位置不会发生变化</li>
<li>开启绝对定位后，元素会从文档流中脱离</li>
<li>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</li>
<li>绝对定位会使元素提升一个层级</li>
<li>绝对定位元素是相对于其包含块进行定位的<ul>
<li>绝对定位的包含块:包含块就是离它最近的开启了定位的祖先元素，如果所有的祖先元素都没有开启定位则根元素就是它的包含块</li>
<li>html（根元素、初始包含块）</li>
</ul>
</li>
</ol>
<ul>
<li>图标字体</li>
</ul>
<p>图标字体（iconfont）<br>            - 在网页中经常需要使用一些图标，可以通过图片来引入图标<br>                但是图片大小本身比较大，并且非常的不灵活<br>            - 所以在使用图标时，我们还可以将图标直接设置为字体，<br>                然后通过font-face的形式来对字体进行引入<br>            - 这样我们就可以通过使用字体的形式来使用图标</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">fontawesome</span> 使用步骤</span><br><span class="line">    1.下载 https://fontawesome.com/</span><br><span class="line">    2.解压</span><br><span class="line">    3.将<span class="selector-tag">css</span>和<span class="selector-tag">webfonts</span>移动到项目中</span><br><span class="line">    4.将<span class="selector-tag">all</span><span class="selector-class">.css</span>引入到网页中</span><br><span class="line">    5.使用图标字体</span><br><span class="line">        <span class="selector-tag">-</span> 直接通过类名来使用图标字体</span><br><span class="line">            class="fas fa-bell"</span><br><span class="line">            class="fab fa-accessible-icon"</span><br></pre></td></tr></table></figure>
<ul>
<li>引入图标字体<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    通过伪元素来设置图标字体</span></span><br><span class="line"><span class="comment">        1.找到要设置图标的元素通过before或after选中</span></span><br><span class="line"><span class="comment">        2.在content中设置字体的编码</span></span><br><span class="line"><span class="comment">        3.设置字体的样式</span></span><br><span class="line"><span class="comment">            fab</span></span><br><span class="line"><span class="comment">            font-family: 'Font Awesome 5 Brands';</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            fas</span></span><br><span class="line"><span class="comment">            font-family: 'Font Awesome 5 Free';</span></span><br><span class="line"><span class="comment">            font-weight: 900; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">'\f1b0'</span>;</span><br><span class="line">        <span class="comment">/* font-family: 'Font Awesome 5 Brands'; */</span></span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">'Font Awesome 5 Free'</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">900</span>; </span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
通过实体来使用图标字体：</li>
</ul>
<p><strong>&#x;</strong> 图标的编码;</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span class="fas"&gt;&amp;#xf0f3;&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><ul>
<li><p>text-decoration 设置文本修饰</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">可选值：</span><br><span class="line">    <span class="selector-tag">none</span> 什么都没有</span><br><span class="line">    <span class="selector-tag">underline</span> 下划线</span><br><span class="line">    <span class="selector-tag">line-through</span> 删除线</span><br><span class="line">    <span class="selector-tag">overline</span> 上划线</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* text-decoration: overline; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* text-decoration: underline red dotted; */</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置省略符号</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    white-space 设置网页如何处理空白</span></span><br><span class="line"><span class="comment">        可选值：</span></span><br><span class="line"><span class="comment">            normal 正常</span></span><br><span class="line"><span class="comment">            nowrap 不换行</span></span><br><span class="line"><span class="comment">            pre 保留空白</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>文字对齐方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span> 文本的水平对齐</span><br><span class="line">    可选值：</span><br><span class="line">        <span class="selector-tag">left</span> 左侧对齐</span><br><span class="line">        <span class="selector-tag">right</span> 右对齐</span><br><span class="line">        <span class="selector-tag">center</span> 居中对齐</span><br><span class="line">        <span class="selector-tag">justify</span> 两端对齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">vertical-align</span> 文字垂直对齐</span><br></pre></td></tr></table></figure>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2></li>
<li><p>background-image 设置背景图片 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的背景色</span><br><span class="line">如果背景的图片小于元素，则背景图片会自动在元素中平铺将元素铺满</span><br><span class="line">如果背景的图片大于元素，将会一个部分背景无法完全显示</span><br><span class="line">如果背景图片和元素一样大，则会直接正常显示</span><br></pre></td></tr></table></figure></li>
<li><p>background-repeat 用来设置背景的重复方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">可选值：</span><br><span class="line"><span class="selector-tag">repeat</span> 默认值 ， 背景会沿着<span class="selector-tag">x</span>轴 <span class="selector-tag">y</span>轴双方向重复</span><br><span class="line"><span class="selector-tag">repeat-x</span> 沿着<span class="selector-tag">x</span>轴方向重复</span><br><span class="line"><span class="selector-tag">repeat-y</span> 沿着<span class="selector-tag">y</span>轴方向重复</span><br><span class="line"><span class="selector-tag">no-repeat</span> 背景图片不重复</span><br></pre></td></tr></table></figure>
</li>
<li><p>background-position 用来设置背景图片的位置 <strong>（要将图片移到最左侧显示，右边则表示负数）</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">设置方式：</span><br><span class="line">通过 <span class="selector-tag">top</span> <span class="selector-tag">left</span> <span class="selector-tag">right</span> <span class="selector-tag">bottom</span> <span class="selector-tag">center</span> 几个表示方位的词来设置背景图片的位置</span><br><span class="line">使用方位词时必须要同时指定两个值，如果只写一个则第二个默认就是<span class="selector-tag">center</span></span><br><span class="line"></span><br><span class="line">通过偏移量来指定背景图片的位置：</span><br><span class="line">    水平方向的偏移量 </span><br><span class="line">    垂直方向变量</span><br></pre></td></tr></table></figure></li>
<li><p>设置背景的范围 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-clip</span> </span><br><span class="line">可选值：</span><br><span class="line">    <span class="selector-tag">border-box</span> 默认值，背景会出现在边框的下边</span><br><span class="line">    <span class="selector-tag">padding-box</span> 背景不会出现在边框，只出现在内容区和内边距</span><br><span class="line">    <span class="selector-tag">content-box</span> 背景只会出现在内容区</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-origin</span> 背景图片的偏移量计算的原点</span><br><span class="line">    <span class="selector-tag">padding-box</span> 默认值，<span class="selector-tag">background-position</span>从内边距处开始计算</span><br><span class="line">    <span class="selector-tag">content-box</span> 背景图片的偏移量从内容区处计算</span><br><span class="line">    <span class="selector-tag">border-box</span> 背景图片的变量从边框处开始计算</span><br></pre></td></tr></table></figure></li>
<li><p>background-size 设置背景图片的大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">第一个值表示宽度 </span><br><span class="line">第二个值表示高度</span><br><span class="line"><span class="selector-tag">-</span> 如果只写一个，则第二个值默认是 <span class="selector-tag">auto</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">cover</span> 图片的比例不变，将元素铺满</span><br><span class="line"><span class="selector-tag">contain</span> 图片比例不变，将图片在元素中完整显示</span><br></pre></td></tr></table></figure></li>
<li><p>背景所有样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span></span><br><span class="line"><span class="selector-tag">background-image</span></span><br><span class="line"><span class="selector-tag">background-repeat</span></span><br><span class="line"><span class="selector-tag">background-position</span></span><br><span class="line"><span class="selector-tag">background-size</span></span><br><span class="line"><span class="selector-tag">background-origin</span></span><br><span class="line"><span class="selector-tag">background-clip</span></span><br><span class="line"><span class="selector-tag">background-attachment</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">backgound</span> 背景相关的简写属性，所有背景相关的样式都可以通过该样式来设置</span><br><span class="line">    并且该样式没有顺序要求，也没有哪个属性是必须写的</span><br><span class="line"></span><br><span class="line">    注意：</span><br><span class="line">        background-size必须写在background-position的后边，并且使用/隔开</span><br><span class="line">            background-position/background-size</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">background-origin</span> <span class="selector-tag">background-clip</span> 两个样式 ，<span class="selector-tag">orgin</span>要在<span class="selector-tag">clip</span>的前边</span><br></pre></td></tr></table></figure></li>
<li><p>background-attachment</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> 背景图片是否跟随元素移动</span><br><span class="line"><span class="selector-tag">-</span> 可选值：</span><br><span class="line">    <span class="selector-tag">scroll</span> 默认值 背景图片会跟随元素移动</span><br><span class="line">    <span class="selector-tag">fixed</span> 背景会固定在页面中，不会随元素移动</span><br></pre></td></tr></table></figure></li>
<li><p>超链接的各种状态</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125;     <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125;  <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;    <span class="comment">/* 当有鼠标悬停在链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125;   <span class="comment">/* 被选择的链接 */</span></span><br></pre></td></tr></table></figure></li>
<li><p>是否显示元素的背面</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">backface-visibility</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2></li>
<li><p>动画:动画和过渡类似，都是可以实现一些动态的效果，不同的是过渡需要在某个属性发生变化时才会触发动画可以自动触发动态效果</p>
</li>
</ul>
<ol>
<li>设置关键帧<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">    <span class="comment">/* 关键帧设置了动画执行每一个步骤 */</span></span><br><span class="line">    <span class="comment">/* from表示动画的开始位置 也可以使用 0% */</span></span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* to动画的结束位置 也可以使用100%*/</span></span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">700px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>设置动画</li>
</ol>
<p><strong>animation: name duration timing-function delay iteration-count direction fill-mode;</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-name</span>: 要对当前元素生效的关键帧的名字 </span><br><span class="line"><span class="selector-tag">animation-name</span>: <span class="selector-tag">test</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>动画的执行时间<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-duration</span>: 动画的执行时间 </span><br><span class="line"><span class="selector-tag">animation-duration</span>: 4<span class="selector-tag">s</span>;</span><br></pre></td></tr></table></figure></li>
<li>动画的延时<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-delay</span>: 2<span class="selector-tag">s</span>;动画的延时</span><br></pre></td></tr></table></figure></li>
<li>过渡的时序函数<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transition-timing-function</span>: 过渡的时序函数</span><br><span class="line">可选值：</span><br><span class="line">    <span class="selector-tag">ease</span> 默认值，慢速开始，先加速，再减速</span><br><span class="line">    <span class="selector-tag">linear</span> 匀速运动</span><br><span class="line">    <span class="selector-tag">ease-in</span> 加速运动</span><br><span class="line">    <span class="selector-tag">ease-out</span> 减速运动</span><br><span class="line">    <span class="selector-tag">ease-in-out</span> 先加速 后减速</span><br><span class="line">    <span class="selector-tag">cubic-bezier</span>() 来指定时序函数</span><br><span class="line">        https://cubic-bezier.com</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">steps</span>() 分步执行过渡效果</span><br><span class="line">        可以设置一个第二个值：</span><br><span class="line">            <span class="selector-tag">end</span> ， 在时间结束时执行过渡(默认值)</span><br><span class="line">            <span class="selector-tag">start</span> ， 在时间开始时执行过渡</span><br><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.24</span>,<span class="selector-class">.95</span>,<span class="selector-class">.82</span>,<span class="selector-tag">-0</span><span class="selector-class">.88</span>);</span><br><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">steps</span>(2, <span class="selector-tag">start</span>);</span><br></pre></td></tr></table></figure></li>
<li>动画执行的次数 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-iteration-count</span> 动画执行的次数 </span><br><span class="line">可选值：</span><br><span class="line">    次数</span><br><span class="line">    <span class="selector-tag">infinite</span> 无限执行</span><br><span class="line"><span class="selector-tag">animation-iteration-count</span>: 1;</span><br></pre></td></tr></table></figure></li>
<li>指定动画运行的方向<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-direction</span></span><br><span class="line">指定动画运行的方向<span class="selector-pseudo">:animation-direction</span>: <span class="selector-tag">alternate-reverse</span>;</span><br><span class="line">    可选值：</span><br><span class="line">    <span class="selector-tag">normal</span> 默认值  从 <span class="selector-tag">from</span> 向 <span class="selector-tag">to</span>运行 每次都是这样 </span><br><span class="line">    <span class="selector-tag">reverse</span> 从 <span class="selector-tag">to</span> 向 <span class="selector-tag">from</span> 运行 每次都是这样 </span><br><span class="line">    <span class="selector-tag">alternate</span> 从 <span class="selector-tag">from</span> 向 <span class="selector-tag">to</span>运行 重复执行动画时反向执行</span><br><span class="line">    <span class="selector-tag">alternate-reverse</span> 从 <span class="selector-tag">to</span> 向 <span class="selector-tag">from</span>运行 重复执行动画时反向执行</span><br></pre></td></tr></table></figure></li>
<li>设置动画的执行状态 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-play-state</span>: 设置动画的执行状态 </span><br><span class="line">可选值：</span><br><span class="line">    <span class="selector-tag">running</span> 默认值 动画执行</span><br><span class="line">    <span class="selector-tag">paused</span> 动画暂停</span><br><span class="line"><span class="selector-tag">animation-play-state</span>: <span class="selector-tag">paused</span>;</span><br></pre></td></tr></table></figure></li>
<li>动画的填充模式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-fill-mode</span>: 动画的填充模式</span><br><span class="line">    可选值：</span><br><span class="line">        <span class="selector-tag">none</span> 默认值 动画执行完毕元素回到原来位置</span><br><span class="line">        <span class="selector-tag">forwards</span> 动画执行完毕元素会停止在动画结束的位置</span><br><span class="line">        <span class="selector-tag">backwards</span> 动画延时等待时，元素就会处于开始位置</span><br><span class="line">        <span class="selector-tag">both</span> 结合了<span class="selector-tag">forwards</span> 和 <span class="selector-tag">backwards</span></span><br><span class="line"><span class="selector-tag">animation-fill-mode</span>: <span class="selector-tag">both</span>;</span><br></pre></td></tr></table></figure></li>
<li>animation：<strong>动画执行时间一定要在延迟时间前面</strong><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">name</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span> <span class="selector-tag">iteration-count</span> <span class="selector-tag">direction</span> <span class="selector-tag">fill-mode</span>;</span><br></pre></td></tr></table></figure>
<h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2></li>
</ol>
<ul>
<li>过渡（transition）<ul>
<li>通过过渡可以指定一个属性发生变化时的切换方式</li>
<li>通过过渡可以创建一些非常好的效果，提升用户的体验 </li>
</ul>
</li>
</ul>
<ol>
<li>transition-property: 指定要执行过渡的属性  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transition-property</span>: <span class="selector-tag">height</span> , <span class="selector-tag">width</span>;</span><br><span class="line"><span class="selector-tag">transition-property</span>: <span class="selector-tag">all</span>; </span><br><span class="line">多个属性间使用,隔开 </span><br><span class="line">如果所有属性都需要过渡，则使用<span class="selector-tag">all</span>关键字</span><br><span class="line">大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡</span><br></pre></td></tr></table></figure></li>
<li>transition-duration: 指定过渡效果的持续时间             <pre><code>时间单位：s 和 ms  1s = 1000ms</code></pre><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transition-duration</span>: 100<span class="selector-tag">ms</span>, 2<span class="selector-tag">s</span>;</span><br><span class="line"><span class="selector-tag">transition-duration</span>: 2<span class="selector-tag">s</span>;</span><br></pre></td></tr></table></figure></li>
<li>transition-timing-function: 过渡的时序函数<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">指定过渡的执行的方式  </span><br><span class="line">可选值：</span><br><span class="line">    <span class="selector-tag">ease</span> 默认值，慢速开始，先加速，再减速</span><br><span class="line">    <span class="selector-tag">linear</span> 匀速运动</span><br><span class="line">    <span class="selector-tag">ease-in</span> 加速运动</span><br><span class="line">    <span class="selector-tag">ease-out</span> 减速运动</span><br><span class="line">    <span class="selector-tag">ease-in-out</span> 先加速 后减速</span><br><span class="line">    <span class="selector-tag">cubic-bezier</span>() 来指定时序函数</span><br><span class="line">        https://cubic-bezier.com</span><br><span class="line">    <span class="selector-tag">steps</span>() 分步执行过渡效果</span><br><span class="line">        可以设置一个第二个值：</span><br><span class="line">            <span class="selector-tag">end</span> ， 在时间结束时执行过渡(默认值)</span><br><span class="line">            <span class="selector-tag">start</span> ， 在时间开始时执行过渡</span><br><span class="line">    <span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.24</span>,<span class="selector-class">.95</span>,<span class="selector-class">.82</span>,<span class="selector-tag">-0</span><span class="selector-class">.88</span>);</span><br><span class="line">    <span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">steps</span>(2, <span class="selector-tag">start</span>);</span><br></pre></td></tr></table></figure></li>
<li>transition-delay: 过渡效果的延迟，等待一段时间后在执行过渡<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transition-delay</span>: 2<span class="selector-tag">s</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><ol>
<li>设置3D展示<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform-style</span>: <span class="selector-tag">preserve-3d</span>;</span><br></pre></td></tr></table></figure></li>
<li>变形就是指通过CSS来改变元素的形状或位置</li>
</ol>
<ul>
<li>变形不会影响到页面的布局<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">transform</span> 用来设置元素的变形效果</span><br><span class="line">    <span class="selector-tag">-</span> 平移：</span><br><span class="line">        <span class="selector-tag">translateX</span>() 沿着<span class="selector-tag">x</span>轴方向平移</span><br><span class="line">        <span class="selector-tag">translateY</span>() 沿着<span class="selector-tag">y</span>轴方向平移</span><br><span class="line">        <span class="selector-tag">translateZ</span>() 沿着<span class="selector-tag">z</span>轴方向平移</span><br><span class="line">            <span class="selector-tag">-</span> 平移元素，百分比是相对于自身计算的</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>Z轴平移</li>
</ol>
<ul>
<li>设置当前网页的视距为800px，人眼距离网页的距离 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">perspective</span><span class="selector-pseudo">:800px</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">z</span>轴平移，调整元素在<span class="selector-tag">z</span>轴的位置，正常情况就是调整元素和人眼之间的距离，</span><br><span class="line">    距离越大，元素离人越近</span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">z</span>轴平移属于立体效果（近大远小），默认情况下网页是不支持透视，如果需要看见效果</span><br><span class="line">    必须要设置网页的视距</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="4">
<li>旋转<br>通过旋转可以使元素沿着x y 或 z旋转指定的角度<br> rotateX()<br> rotateY()<br> rotateZ()<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateZ</span>(<span class="selector-class">.25turn</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateY</span>(180<span class="selector-tag">deg</span>) <span class="selector-tag">translateZ</span>(400<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateZ</span>(400<span class="selector-tag">px</span>) <span class="selector-tag">rotateY</span>(180<span class="selector-tag">deg</span>) ;</span><br></pre></td></tr></table></figure></li>
<li>缩放<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">对元素进行缩放的函数：</span><br><span class="line">    <span class="selector-tag">scaleX</span>() 水平方向缩放</span><br><span class="line">    <span class="selector-tag">scaleY</span>() 垂直方向缩放</span><br><span class="line">    <span class="selector-tag">scale</span>() 双方向的缩放</span><br></pre></td></tr></table></figure></li>
<li>变形的原点 默认值 center<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform-origin</span><span class="selector-pseudo">:20px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="flex-弹性盒、伸缩盒"><a href="#flex-弹性盒、伸缩盒" class="headerlink" title="flex(弹性盒、伸缩盒)"></a>flex(弹性盒、伸缩盒)</h2><ul>
<li><p>弹性容器</p>
<ul>
<li>要使用弹性盒，必须先将一个元素设置为弹性容器</li>
<li>我们通过 display 来设置弹性容器<br>  display:flex  设置为块级弹性容器<br>  display:inline-flex 设置为行内的弹性容器</li>
</ul>
</li>
<li><p>弹性元素</p>
<ul>
<li>弹性容器的子元素是弹性元素（弹性项）</li>
<li>弹性元素可以同时是弹性容器</li>
</ul>
</li>
</ul>
<ol>
<li>flex-grow 指定弹性元素的<strong>伸展</strong>的系数</li>
</ol>
<ul>
<li>表示当父元素有多余空间的时，子元素如何伸展<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex-grow</span>: 1;父元素的剩余空间，会按照比例进行分配</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>flex-shrink 指定弹性元素的<strong>收缩</strong>系数</li>
</ol>
<ul>
<li>当父元素中的空间不足以容纳所有的子元素时，如果对子元素进行收缩<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex-shrink</span>: 1;按照比例进行收缩</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>flex-direction 指定容器中弹性元素的排列方式</li>
</ol>
<ul>
<li><p>可选值：</p>
<ul>
<li>row 默认值，弹性元素在容器中水平排列（左向右）<ul>
<li>主轴 自左向右</li>
</ul>
</li>
<li>row-reverse 弹性元素在容器中反向水平排列（右向左）<ul>
<li>主轴 自右向左</li>
</ul>
</li>
<li>column 弹性元素纵向排列（自上向下）</li>
<li>column-reverse 弹性元素方向纵向排列（自下向上）</li>
</ul>
</li>
<li><p>主轴：<br>  弹性元素的排列方向称为主轴</p>
</li>
<li><p>侧轴：<br>  与主轴垂直方向的称为侧轴</p>
</li>
</ul>
<ol start="4">
<li>flex-wrap:设置弹性元素是否在弹性容器中自动换行</li>
</ol>
<ul>
<li>可选值：<ul>
<li>nowrap 默认值，元素不会自动换行</li>
<li>wrap 元素沿着辅轴方向自动换行</li>
<li>wrap-reverse 元素沿着辅轴反方向换行</li>
</ul>
</li>
</ul>
<ol start="5">
<li><strong>flex-flow:  wrap 和 direction 的简写属性</strong><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">row</span> <span class="selector-tag">wrap</span>; 同时设置<span class="selector-tag">wrap</span> 和 <span class="selector-tag">direction</span>不区分顺序</span><br></pre></td></tr></table></figure></li>
<li>justify-content：<strong>(justify代表主轴)</strong> 如何分配主轴上的空白空间（主轴上的元素如何排列）</li>
</ol>
<ul>
<li>可选值：<ul>
<li>flex-start 元素沿着主轴起边排列</li>
<li>flex-end 元素沿着主轴终边排列</li>
<li>center 元素居中排列</li>
<li>space-around 空白分布到元素两侧</li>
<li>space-between 空白均匀分布到元素间</li>
<li>space-evenly  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ol start="7">
<li>align-items:<strong>(align代表侧轴)</strong> 元素在辅轴上如何对齐,元素间的关系</li>
</ol>
<ul>
<li>可选值：<ul>
<li>stretch 默认值，将元素的长度设置为相同的值</li>
<li>flex-start 元素不会拉伸，沿着辅轴起边对齐</li>
<li>flex-end 沿着辅轴的终边对齐</li>
<li>center 居中对齐</li>
<li>baseline 基线对齐<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">flex-start</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ol start="8">
<li>align-content: 辅轴空白空间的分布<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">align-content</span>: <span class="selector-tag">space-between</span>;</span><br></pre></td></tr></table></figure></li>
<li>align-self: 用来覆盖当前弹性元素上的align-items<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">align-self</span>: <span class="selector-tag">stretch</span>;</span><br></pre></td></tr></table></figure></li>
<li>flex-basis 指定的是元素在主轴上的基础长度</li>
</ol>
<ul>
<li>如果主轴是 横向的 则 该值指定的就是元素的宽度</li>
<li>如果主轴是 纵向的 则 该值指定的是就是元素的高度</li>
<li>默认值是 auto，表示参考元素自身的高度或宽度</li>
<li>如果传递了一个具体的数值，则以该值为准</li>
</ul>
<ol start="11">
<li>flex 可以设置弹性元素所有的三个样式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex</span> 增长 缩减 基础;</span><br><span class="line"><span class="selector-tag">flex</span>: <span class="selector-tag">initial</span>;</span><br><span class="line">    <span class="selector-tag">initial</span> "<span class="selector-tag">flex</span>: 0 1 <span class="selector-tag">auto</span>".</span><br><span class="line">    <span class="selector-tag">auto</span>  "<span class="selector-tag">flex</span>: 1 1 <span class="selector-tag">auto</span>"</span><br><span class="line">    <span class="selector-tag">none</span> "<span class="selector-tag">flex</span>: 0 0 <span class="selector-tag">auto</span>" 弹性元素没有弹性</span><br></pre></td></tr></table></figure></li>
<li>order 决定弹性元素的排列顺序<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">order</span>: 2;</span><br></pre></td></tr></table></figure></li>
<li>flex: none; 设置弹性盒不产生形变</li>
</ol>
<h4 id="CSS思维导图"><a href="#CSS思维导图" class="headerlink" title="CSS思维导图"></a>CSS思维导图</h4><p><img src="/images/CSS.png" alt="CSS"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础知识点</title>
    <url>/2020/12/22/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="正则表达式-正则表达式用于定义一些字符串的规则"><a href="#正则表达式-正则表达式用于定义一些字符串的规则" class="headerlink" title="正则表达式(正则表达式用于定义一些字符串的规则)"></a>正则表达式(正则表达式用于定义一些字符串的规则)</h2><h3 id="创建正则表达式的语法"><a href="#创建正则表达式的语法" class="headerlink" title="创建正则表达式的语法"></a>创建正则表达式的语法</h3><ul>
<li>创建对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"正则表达式"</span>,<span class="string">"匹配模式"</span>);</span><br><span class="line">    使用<span class="keyword">typeof</span>检查正则对象，会返回object</span><br><span class="line"> 	<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a"</span>); </span><br><span class="line">    这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class="line">在构造函数中可以传递一个匹配模式作为第二个参数，</span><br><span class="line"> 	可以是 </span><br><span class="line"> 		i 忽略大小写 </span><br><span class="line"> 		g 全局匹配模式</span><br></pre></td></tr></table></figure></li>
<li>字面量来创建<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">使用字面量来创建正则表达式</span><br><span class="line">	语法：<span class="keyword">var</span> 变量 = <span class="regexp">/正则表达式/</span>匹配模式</span><br><span class="line">使用字面量的方式创建更加简单</span><br><span class="line">	使用构造函数创建更加灵活</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a"</span>,<span class="string">"i"</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;</span><br></pre></td></tr></table></figure>
<h3 id="规则表示方式"><a href="#规则表示方式" class="headerlink" title="规则表示方式"></a>规则表示方式</h3><a id="more"></a></li>
</ul>
<ol>
<li>使用 | 表示或者的意思<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/a|b|c/</span>;</span><br></pre></td></tr></table></figure></li>
<li>[]里的内容也是或的关系<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[]里的内容也是或的关系</span><br><span class="line">[ab] == a|b</span><br><span class="line">[a-z] 任意小写字母</span><br><span class="line">[A-Z] 任意大写字母</span><br><span class="line">[A-z] 任意字母</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>] 任意数字</span><br></pre></td></tr></table></figure></li>
<li>[^ ] 表示非<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/[^0-9]/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"12a3456"</span>)); <span class="comment">//true，除了数字以外还有非数字的内容</span></span><br></pre></td></tr></table></figure></li>
<li>split()：根据任意字母来将字符串拆分</li>
</ol>
<ul>
<li>可以将一个字符串拆分为一个数组</li>
<li>方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串</li>
<li>这个方法即使不指定全局匹配，也会全都插分<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = str.split(<span class="regexp">/[A-z]/</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>search():可以搜索字符串中是否含有指定内容</li>
</ol>
<ul>
<li>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1</li>
<li>它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</li>
<li>serach()只会查找第一个，即使设置全局匹配也没用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">result = str.search(<span class="regexp">/a[bef]c/</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="6">
<li>match():可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</li>
</ol>
<ul>
<li>默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索</li>
<li>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</li>
<li>可以为一个正则表达式设置多个匹配模式，且顺序无所谓</li>
<li>match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">result = str.match(<span class="regexp">/[a-z]/ig</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="7">
<li>replace():可以将字符串中指定内容替换为新的内容</li>
</ol>
<ul>
<li>参数：<ol>
<li>被替换的内容，可以接受一个正则表达式作为参数</li>
<li>新的内容</li>
</ol>
</li>
<li>默认只会替换第一个<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">result = str.replace(<span class="regexp">/[a-z]/gi</span> , <span class="string">""</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="量词-通过量词可以设置一个内容出现的次数-量词只对它前边的一个内容起作用"><a href="#量词-通过量词可以设置一个内容出现的次数-量词只对它前边的一个内容起作用" class="headerlink" title="量词:通过量词可以设置一个内容出现的次数,量词只对它前边的一个内容起作用"></a>量词:通过量词可以设置一个内容出现的次数,量词只对它前边的一个内容起作用</h3><ol>
<li>{n} 正好出现n次<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span>;</span><br></pre></td></tr></table></figure></li>
<li>{m,n} 出现m-n次     <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/ab&#123;1,3&#125;c/</span>;</span><br></pre></td></tr></table></figure></li>
<li>{m,} m次以上<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/ab&#123;3,&#125;c/</span>;</span><br></pre></td></tr></table></figure></li>
<li>+ 至少一个，相当于{1,}<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure></li>
<li>* 0个或多个，相当于{0,}<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/ab*c/</span>;</span><br></pre></td></tr></table></figure></li>
<li>? 0个或1个，相当于{0,1}<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/ab?c/</span>;</span><br></pre></td></tr></table></figure></li>
<li>检查一个字符串中是否以a开头</li>
</ol>
<ul>
<li>^ 表示开头</li>
<li>$ 表示结尾<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reg = <span class="regexp">/^a/</span>; <span class="comment">//匹配开头的a</span></span><br><span class="line">reg = <span class="regexp">/a$/</span>; <span class="comment">//匹配结尾的a</span></span><br><span class="line">reg = <span class="regexp">/^a$/</span>;<span class="comment">//</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="8">
<li>转移字符<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\. 来表示.</span><br><span class="line">\\  表示\</span><br></pre></td></tr></table></figure></li>
<li>元字符：拥有特殊含义的字符</li>
</ol>
<ul>
<li>\w<ul>
<li>任意字母、数字、_  [A-z0-9_]</li>
</ul>
</li>
<li>\W<ul>
<li>除了字母、数字、_  [^A-z0-9_]</li>
</ul>
</li>
<li>\d<ul>
<li>任意的数字 [0-9]</li>
</ul>
</li>
<li>\D<ul>
<li>除了数字 [^0-9]</li>
</ul>
</li>
<li>\s<ul>
<li>空格</li>
</ul>
</li>
<li>\S<ul>
<li>除了空格</li>
</ul>
</li>
<li>\b<ul>
<li>单词边界</li>
</ul>
</li>
<li>\B<ul>
<li>除了单词边界<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 创建一个正则表达式检查一个字符串中是否含有单词child</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/\bchild\b/</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="DOM-通过document获取对象来操作html"><a href="#DOM-通过document获取对象来操作html" class="headerlink" title="DOM(通过document获取对象来操作html)"></a>DOM(通过document获取对象来操作html)</h2><h3 id="DOM的查询"><a href="#DOM的查询" class="headerlink" title="DOM的查询"></a>DOM的查询</h3><ol>
<li><p>事件: 就是用户和浏览器之间的交互行为,比如：点击按钮，鼠标移动、关闭窗口</p>
<ul>
<li>可以为按钮的对应事件绑定处理函数的形式来响应事件</li>
<li>这样当事件被触发时，其对应的函数将会被调用</li>
</ul>
</li>
<li><p>window.onload:onload事件会在整个页面加载完成之后才触发</p>
<ul>
<li>该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了 <br> <strong>也可以将js代码编写到页面的下部</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取id为btn的按钮</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">    <span class="comment">//为按钮绑定一个单击响应函数</span></span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>innerHTML用于获取元素内部的HTML代码的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(inputs[i].innerHTML);</span><br></pre></td></tr></table></figure></li>
<li><p>如果需要读取元素节点属性，直接使用 元素.属性名。<br>例子：元素.id  元素.name 元素.value</p>
</li>
</ol>
<ul>
<li><strong>注意</strong>：class属性不能采用这种方式，读取class属性时需要使用 元素.className</li>
</ul>
<ol start="5">
<li>childNodes属性会获取包括文本节点在呢的所有<strong>节点</strong>，根据DOM标签标签间空白也会当成文本节点</li>
</ol>
<ul>
<li>（<strong>注意</strong>：在IE8及以下的浏览器中，不会将空白文本当成子节点，所以该属性在IE8中会返回4个子元素而其他浏览器是9个）</li>
</ul>
<ol start="6">
<li>children属性可以获取当前元素的所有子<strong>元素</strong></li>
<li>firstChild可以获取到当前元素的第一个子<strong>节点</strong>（包括空白文本节点）</li>
<li>onclick 事件会在元素被点击时发生<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tr = <span class="keyword">this</span>.parentNode.parentNode;</span><br><span class="line">    <span class="comment">// 获取要删除员工的名字</span></span><br><span class="line">    <span class="keyword">var</span> rname = tr.getElementsByTagName(<span class="string">"td"</span>)[<span class="number">0</span>].innerHTML;</span><br><span class="line">    <span class="comment">// 删除之前提示是否删除</span></span><br><span class="line">    <span class="keyword">var</span> flag = confirm(<span class="string">"是否删除"</span> + rname + <span class="string">"吗?"</span>);</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">        tr.parentNode.removeChild(tr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消默认行为，即超链接的跳转</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取body标签<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在document中有一个属性body，它保存的是body的引用</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br></pre></td></tr></table></figure></li>
<li>document.all代表页面中所有的元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var all &#x3D; document.all;</span><br></pre></td></tr></table></figure></li>
<li>document.querySelector():需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">".box1 div"</span>);</span><br><span class="line"><span class="comment">// 使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个</span></span><br></pre></td></tr></table></figure></li>
<li>document.querySelectorAll()：该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".box1"</span>);</span><br><span class="line"><span class="comment">// 即使符合条件的元素只有一个，它也会返回数组</span></span><br></pre></td></tr></table></figure>
<h3 id="DOM的增删改"><a href="#DOM的增删改" class="headerlink" title="DOM的增删改"></a>DOM的增删改</h3></li>
</ol>
<ul>
<li>增</li>
</ul>
<ol>
<li>document.createElement():可以用于创建一个<strong>元素节点</strong>对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">// 它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回</span></span><br></pre></td></tr></table></figure></li>
<li>document.createTextNode():可以用来创建一个<strong>文本节点</strong>对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gzText = <span class="built_in">document</span>.createTextNode(<span class="string">"广州"</span>);</span><br><span class="line"><span class="comment">// 需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回</span></span><br></pre></td></tr></table></figure></li>
<li>appendChild():向一个父节点中添加一个新的子节点(父节点.appendChild(子节点))<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">li.appendChild(gzText);</span><br><span class="line"><span class="comment">// 广州节点添加到li下</span></span><br></pre></td></tr></table></figure></li>
<li>insertBefore():可以在指定的子节点前插入新的子节点(父节点.insertBefore(新节点,旧节点))<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">city.insertBefore(li , bj);</span><br><span class="line"><span class="comment">// 在bj前添加li节点</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>改</li>
</ul>
<ol>
<li>replaceChild():可以使用指定的子节点替换已有的子节点(父节点.replaceChild(新节点,旧节点))<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">city.replaceChild(li , bj);</span><br><span class="line"><span class="comment">// 使用bj替换li</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>删</li>
</ul>
<ol>
<li>removeChild():可以删除一个子节点(父节点.removeChild(子节点))<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bj.parentNode.removeChild(bj);</span><br><span class="line"><span class="comment">// 子节点.parentNode.removeChild(子节点):此方法可以不用知道父节点就可以删除自身节点</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>读取</li>
</ul>
<ol>
<li>city.innerHTML:读取#city内的HTML代码<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(city.innerHTML);</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>添加</li>
</ul>
<ol>
<li>bj.innnerHTML = String:向bj中添加字符串<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bj.innerHTML = <span class="string">"昌平"</span>;</span><br></pre></td></tr></table></figure></li>
<li>appendChild(li) 或者 city.innerHTML += “<li>广州</li>“:一般两种方式结合使用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//向li中设置文本</span></span><br><span class="line">li.innerHTML = <span class="string">"广州"</span>;</span><br><span class="line">    <span class="comment">//将li添加到city中</span></span><br><span class="line">city.appendChild(li);</span><br><span class="line">----------------------------------------------</span><br><span class="line">city.innerHTML += <span class="string">"&lt;li&gt;广州&lt;/li&gt;"</span>;</span><br><span class="line">    <span class="comment">// 直接通过innerHTML添加</span></span><br></pre></td></tr></table></figure>
<h3 id="使用DOM操作CSS"><a href="#使用DOM操作CSS" class="headerlink" title="使用DOM操作CSS"></a>使用DOM操作CSS</h3></li>
<li>修改box1的宽度:元素.style.样式名 = 样式值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box1.style.width = <span class="string">"300px"</span>;</span><br><span class="line">box1.style.backgroundColor = <span class="string">"yellow"</span>;</span><br><span class="line">注意：如果CSS的样式名中含有-，</span><br><span class="line">	这种名称在JS中是不合法的比如background-color</span><br><span class="line">	需要将这种样式名修改为驼峰命名法，</span><br><span class="line">	去掉-，然后将-后的字母大写</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>我们通过style属性设置的样式都是内联样式，而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</li>
<li>但是如果在样式中写了!important，则此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效</li>
<li><strong>所以尽量不要为样式添加!important</strong></li>
</ul>
<ol start="2">
<li>读取元素的样式:元素.style.样式名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(box1.style.width);</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>通过style属性设置和读取的都是内联样式,无法读取样式表中的样式</li>
</ul>
<ol start="3">
<li>获取元素的当前显示的样式 <strong>(IE)</strong> :元素.currentStyle.样式名</li>
</ol>
<ul>
<li><strong>currentStyle只有IE浏览器支持，其他的浏览器都不支持</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(box1.currentStyle.width);<span class="comment">// 读取</span></span><br><span class="line">box1.currentStyle.width = <span class="string">"200px"</span>; <span class="comment">// 修改</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>获取元素的当前显示的样式 <strong>(其他浏览器)</strong> :getComputedStyle()这个方法来获取元素当前的样式</li>
</ol>
<ul>
<li><strong>但是该方法不支持IE8及以下的浏览器</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = getComputedStyle(box1,<span class="literal">null</span>);</span><br><span class="line">这个方法是<span class="built_in">window</span>的方法，可以直接使用</span><br><span class="line">* 需要两个参数</span><br><span class="line">* 		第一个：要获取样式的元素</span><br><span class="line">* 		第二个：可以传递一个伪元素，一般都传<span class="literal">null</span></span><br><span class="line">* 该方法会返回一个对象，对象中封装了当前元素对应的样式</span><br><span class="line">* 	    可以通过对象.样式名来读取样式</span><br><span class="line">* 	    如果获取的样式没有设置，则会获取到真实的值，而不是默认值</span><br><span class="line">* 	    比如：没有设置width，它不会获取到auto，而是一个长度</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>通过currentStyle和getComputedStyle()读取到的样式都是只读的，不能修改，如果要修改必须通过style属性</strong><br>5. 通用方法：定义一个函数，判断浏览器支持哪种函数则调用对应函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 定义一个函数，用来获取指定元素的当前的样式</span><br><span class="line">* 参数：</span><br><span class="line">* 		obj 要获取样式的元素</span><br><span class="line">* 		name 要获取的样式名</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj , name</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">        <span class="comment">//正常浏览器的方式，具有getComputedStyle()方法</span></span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj , <span class="literal">null</span>)[name];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//IE8的方式，没有getComputedStyle()方法</span></span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = getStyle(box1,<span class="string">"w</span></span><br><span class="line"><span class="string">alert(w);</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常浏览器的方式</span></span><br><span class="line"><span class="comment">//alert(getComputedStyle(box1,null).backgroundColor);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IE8的方式</span></span><br><span class="line"><span class="comment">//alert(box1.currentStyle.backgroundColor);</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>clientWidth / clientHeight：这两个属性可以获取元素的可见宽度和高度</li>
</ol>
<ul>
<li>这些属性都是不带px的，返回都是一个数字，可以直接进行计算</li>
<li>会获取元素宽度和高度，包括内容区和内边距</li>
<li>这些属性都是只读的，不能修改<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(box1.clientWidth);</span><br><span class="line">alert(box1.clientHeight);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="7">
<li>offsetWidth / offsetHeight:获取元素的整个的宽度和高度，包括内容区、内边距和<strong>边框</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(box1.offsetWidth);</span><br></pre></td></tr></table></figure></li>
<li>offsetParent:可以用来获取当前元素的定位父元素</li>
</ol>
<ul>
<li>会获取到离当前元素最近的开启了定位的祖先元素</li>
<li>如果所有的祖先元素都没有开启定位，则返回body<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> op = box1.offsetParent;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="9">
<li>offsetLeft / offsetTop：当前元素相对于其定位父元素的水平偏移量 / 垂直偏移量</li>
<li>scrollWidth / scrollHeight:可以获取元素整个滚动区域的宽度和高度<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(box4.clientHeight);</span><br><span class="line">alert(box4.scrollWidth);</span><br></pre></td></tr></table></figure></li>
<li>scrollLeft / scrollTop:可以获取水平 / 垂直滚动条滚动的距离<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(box4.scrollLeft);</span><br><span class="line">alert(box4.scrollTop);</span><br></pre></td></tr></table></figure></li>
<li>scrollHeight - scrollTop == clientHeight:说明垂直滚动条滚动到底了</li>
<li>onscroll:该事件会在元素的滚动条滚动时触发</li>
<li>disabled:属性可以设置一个元素是否禁用<ul>
<li>如果设置为true，则元素禁用</li>
<li>如果设置为false，则元素可用</li>
</ul>
</li>
</ol>
<h3 id="事件的委派、绑定、传播"><a href="#事件的委派、绑定、传播" class="headerlink" title="事件的委派、绑定、传播"></a>事件的委派、绑定、传播</h3><ol>
<li>事件的委派：指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素从而通过祖先元素的响应函数来处理事件。</li>
</ol>
<ul>
<li>target:触发事件的对象是我们期望的元素，则执行否则不执行<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(event.target.className == <span class="string">"link"</span>)&#123;</span><br><span class="line">    alert(<span class="string">"我是ul的单击响应函数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>事件的绑定:它只能同时为一个元素的一个事件绑定一个响应函数，不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的。</li>
</ol>
<ul>
<li>addEventListener():通过这个方法也可以为元素绑定响应函数,<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>事件的字符串，不要on</span><br><span class="line"><span class="number">2.</span>回调函数，当事件触发时该函数会被调用</span><br><span class="line"><span class="number">3.</span>是否在捕获阶段触发事件，需要一个布尔值，一般都传<span class="literal">false</span></span><br><span class="line">使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>事件的传播:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>捕获阶段</span><br><span class="line">- 在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件</span><br><span class="line"><span class="number">2.</span>目标阶段</span><br><span class="line">- 事件捕获到目标元素，捕获结束开始在目标元素上触发事件</span><br><span class="line"><span class="number">3.</span>冒泡阶段</span><br><span class="line">- 事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</span><br></pre></td></tr></table></figure>
<h3 id="JavaScript基础知识思维导图"><a href="#JavaScript基础知识思维导图" class="headerlink" title="JavaScript基础知识思维导图"></a>JavaScript基础知识思维导图</h3><img src="/images/JavaScript%E5%9F%BA%E7%A1%80.png" alt="JavaScript基础知识"></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript基础知识</tag>
      </tags>
  </entry>
</search>
